<?xml version="1.0" encoding="utf-8"?> <feed xmlns="http://www.w3.org/2005/Atom"><title>Russell Harmon</title><link href="http://rus.har.mn/atom.xml" rel="self"/><link href="http://rus.har.mn/"/> <updated>2015-02-14T12:34:03-05:00</updated> <id>http://rus.har.mn/</id> <author> <name>Russell Harmon</name> <email>russ@eatnumber1.com</email> </author> <entry><title>The MIN Challenge</title><link href="http://rus.har.mn/blog/2014-06-15/the-min-challenge"/> <updated>2014-06-15T00:00:00-04:00</updated> <id>tag:rus.har.mn,2014-06-15:/blog/2014-06-15/the-min-challenge</id> <category scheme="http://rus.har.mn/tag" term="machinae"/> <content type="html">&lt;h1 id="the-min-challenge"&gt;The MIN Challenge&lt;/h1&gt;&lt;p&gt;It’s surprisingly difficult to make a proper function-like macro. You’d think that it’s as simple as putting your code all on one line in the macro’s body, but there’s a great deal of considerations that may not have occurred to you, and in the end it’s not even possible to do in the general case without relying on non-standard extensions to C.&lt;/p&gt;&lt;p&gt;An old challenge that I’ve heard used to illustrate these difficulties goes as follows:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;Write a function-like macro for finding the smaller of two numbers.&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;In other words, a &lt;code&gt;min&lt;/code&gt; macro!&lt;/p&gt;&lt;h2 id="attempt-1-if-statements"&gt;Attempt 1: If Statements&lt;/h2&gt;&lt;p&gt;Taking on the challenge, my first attempt goes as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="cp"&gt;#define min(a, b, out) \&lt;/span&gt; &lt;span class="cp"&gt; if (a &amp;lt; b) { \&lt;/span&gt; &lt;span class="cp"&gt; out = a; \&lt;/span&gt; &lt;span class="cp"&gt; } else { \&lt;/span&gt; &lt;span class="cp"&gt; out = b; \&lt;/span&gt; &lt;span class="cp"&gt; }&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This uses a simple if statement to solve the problem and works in the example given, but doesn’t even compile in the following case:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code uses the &lt;a href="http://en.wikipedia.org/wiki/Comma_operator" title="Comma Operator"&gt;comma operator&lt;/a&gt; in order to have the return value of the entire &lt;a href="http://lambda-the-ultimate.org/node/1044" title="Expressions vs Statements"&gt;expression&lt;/a&gt; be the value of the output variable.&lt;/p&gt;&lt;p&gt;This doesn’t work however because the min macro expands into an if-statement. Here’s the preprocessed code:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="attempt-2-ternary-operation"&gt;Attempt 2: Ternary Operation&lt;/h2&gt;&lt;p&gt;Trying again, my second attempt goes as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="cp"&gt;#define min(a, b) a &amp;gt; b ? b : a&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This uses a &lt;a href="http://en.wikipedia.org/wiki/%3F:" title="Ternary Operation"&gt;ternary operation&lt;/a&gt; to make the macro into an expression rather than a statement like attempt 1 was, but doesn’t work correctly for the following program:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just looking at the code, it seems as though this program should return &lt;code&gt;4&lt;/code&gt;, but instead it returns &lt;code&gt;2&lt;/code&gt;! Again what happened becomes apparent when we preprocess the code:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our &lt;code&gt;+ 2&lt;/code&gt; got associated with the else branch of the ternary operation, and so not executed! We can fix this by surrounding the entire macro result in parentheses.&lt;/p&gt;&lt;h2 id="attempt-3-parenthesized-ternary-operation"&gt;Attempt 3: Parenthesized Ternary Operation&lt;/h2&gt;&lt;p&gt;Trying again, my third attempt goes as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="cp"&gt;#define min(a, b) (a &amp;gt; b ? b : a)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This surrounds the entire macro in parentheses in order to make the ternary operation evaluate before any additional expressions that are placed around it. Unfortunately, this too breaks for the following program:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since &lt;code&gt;3 &amp;amp; 0&lt;/code&gt; is zero, you would expect this to return &lt;code&gt;0&lt;/code&gt;, but instead returns &lt;code&gt;2&lt;/code&gt;. Here’s the preprocessed source:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since the &lt;code&gt;&amp;amp;&lt;/code&gt; operator has a lower &lt;a href="http://en.wikipedia.org/wiki/Operators_in_C_and_C%2B%2B#Operator_precedence" title="C Operator Precedence"&gt;precedence&lt;/a&gt; than &lt;code&gt;&amp;gt;&lt;/code&gt;, the expression is equivalent to &lt;code&gt;(2 &amp;gt; 3) &amp;amp; 0&lt;/code&gt;, which is always false! We can fix this by surrounding every use of a macro argument with parentheses.&lt;/p&gt;&lt;h2 id="attempt-4-parenthesized-ternary-operation-with-parenthesized-arguments"&gt;Attempt 4: Parenthesized Ternary Operation with Parenthesized Arguments&lt;/h2&gt;&lt;p&gt;Trying again, my fourth attempt goes as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="cp"&gt;#define min(a, b) ((a) &amp;gt; (b) ? (b) : (a))&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This surrounds every use of a macro argument with parentheses in order to force the argument to evaluate before any additional expressions that are placed around it. Unfortunately (is this getting tiring yet?), this too breaks for the following program:&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When run, this program prints &lt;code&gt;1&lt;/code&gt; twice! Lets see the preprocessed code:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It’s getting pretty ugly now, but this code ends up calling &lt;code&gt;printf&lt;/code&gt; twice if the first call to it returned a number less than &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="attempt-5-statement-expressions"&gt;Attempt 5: Statement Expressions&lt;/h2&gt;&lt;p&gt;Now we’re in a bit of a difficult spot. The only way to prevent this case is to create temporary variables in which to store the result of expanding the macro arguments, but creating temporary variables will cause this macro to no longer be an expression, bringing us back to the same problems with attempt 1. If you’re writing strictly standards conforming C, this is where you stop. This is an unsolvable problem. If instead however we can draw from the extensions to C that &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html" title="Extensions to the C Language Family"&gt;GNUC&lt;/a&gt; brings us, we can leverage &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Statement-Exprs.html#Statement-Exprs" title="Statements and Declarations in Expressions"&gt;statement expressions&lt;/a&gt;. A statement expression is an expression which may itself contain statements and declarations, enabling us to create our temporary variables. The syntax for statement expressions is a little odd. You use it by surrounding your code with &lt;code&gt;({ })&lt;/code&gt;, and the last statement in your statement expression should itself be an expression and that expression will be the resulting value of the entire statement expression. This enables us to write a better &lt;code&gt;min&lt;/code&gt;:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="cp"&gt;#define min(a, b) ({ \&lt;/span&gt; &lt;span class="cp"&gt; int _a = (a); \&lt;/span&gt; &lt;span class="cp"&gt; int _b = (b); \&lt;/span&gt; &lt;span class="cp"&gt; _a &amp;lt; _b ? _a : _b; \&lt;/span&gt; &lt;span class="cp"&gt;})&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But wait, there’s a problem here. I’ve built in the assumption that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; have type &lt;code&gt;int&lt;/code&gt;, where previously we had made no such assumption. Thankfully we can generalize the macro again using another GNUC extension: &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Typeof.html#Typeof" title="Typeof"&gt;typeof&lt;/a&gt;. This extension to C allows you to refer to the type of an arbitrary expression, thereby allowing you to declare variables of the type of an arbitrary expression.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="cp"&gt;#define min(a, b) ({ \&lt;/span&gt; &lt;span class="cp"&gt; typeof(a) _a = (a); \&lt;/span&gt; &lt;span class="cp"&gt; typeof(b) _b = (b); \&lt;/span&gt; &lt;span class="cp"&gt; _a &amp;lt; _b ? _a : _b; \&lt;/span&gt; &lt;span class="cp"&gt;})&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we’ve finally arrived at a generalized function-like min macro that can be used anywhere that a normal function can (but you still can’t take the address of it).&lt;/p&gt;&lt;div class="footnotes"&gt; &lt;ol&gt; &lt;li id="fn:1"&gt; &lt;p&gt;Note that &lt;code&gt;printf&lt;/code&gt; returns the number of characters printed. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; </content> </entry> <entry><title>String to Number Conversion in C Takes its Toll</title><link href="http://rus.har.mn/blog/2014-05-19/strtol-error-checking"/> <updated>2014-05-19T00:00:00-04:00</updated> <id>tag:rus.har.mn,2014-05-19:/blog/2014-05-19/strtol-error-checking</id> <category scheme="http://rus.har.mn/tag" term="machinae"/> <content type="html">&lt;h1 id="string-to-number-conversion-in-c-takes-its-toll"&gt;String to Number Conversion in C Takes its Toll&lt;/h1&gt;&lt;p&gt;Converting a string to a number in C is no simple affair. Many of you may have heard of &lt;a href="http://man7.org/linux/man-pages/man3/atoi.3.html" title="atoi(3)"&gt;atoi(3)&lt;/a&gt;; one of the ways to convert a string to a number. Unfortunately, modern thinking says that &lt;code&gt;atoi&lt;/code&gt; should never be used, and so it’s use is &lt;a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/atoi.html#tag_16_30_07" title="atoi - APPLICATION USAGE"&gt;discouraged&lt;/a&gt;. Instead, we now have &lt;code&gt;strtol&lt;/code&gt;. &lt;sup id="fnref:strtol-and-friends"&gt;&lt;a href="#fn:strtol-and-friends" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&lt;h2 id="whats-wrong-with-atoi"&gt;What’s wrong with atoi?&lt;/h2&gt;&lt;p&gt;The reason for discouraging use of &lt;code&gt;atoi&lt;/code&gt; stems from the fact that there is no way to detect if overflow or underflow has occurred, and no way to check if the entire string has been converted (aka there’s no way to detect &lt;code&gt;atoi("123garbage")&lt;/code&gt;). Consider the following code:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="c1"&gt;// 2^32+1, assuming 32-bit int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;uintmax_plus_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4294967297&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uintmax_plus_one&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When run instead of printing &lt;code&gt;4294967296&lt;/code&gt; as expected, this program will print &lt;code&gt;1&lt;/code&gt;! The vast majority of programs do not check for or properly handle this case, and so you can end up with situations like the following:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="c1"&gt;// 2^32+1, assuming 32-bit int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;uintmax_plus_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4294967297&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uintmax_plus_one&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we’re allocating far less memory than we expected. This problem can quickly become the source of an &lt;a href="https://www.owasp.org/index.php/Integer_overflow" title="Integer overflow"&gt;integer overflow&lt;/a&gt; vulnerability.&lt;/p&gt;&lt;h2 id="enter-strtol"&gt;Enter strtol!&lt;/h2&gt;&lt;p&gt;In order to do the conversion safely, we instead should use &lt;code&gt;strtol&lt;/code&gt;. It is unfortunately quite difficult to call this function properly. Consider the following documentation pulled from the BSD Library Functions Manual’s section on &lt;code&gt;strtol&lt;/code&gt;:&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;The strtol(), strtoll(), strtoimax(), and strtoq() functions return the result of the conversion, unless the value would underflow or overflow. If no conversion could be performed, 0 is returned and the global variable errno is set to EINVAL (the last feature is not portable across all platforms). If an overflow or underflow occurs, errno is set to ERANGE and the function return value is clamped according to the following table.&lt;/p&gt;&lt;table class="neat"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th style="text-align: center"&gt;Function&lt;/th&gt; &lt;th style="text-align: center"&gt;underflow&lt;/th&gt; &lt;th style="text-align: center"&gt;overflow&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style="text-align: center"&gt;strtol()&lt;/td&gt; &lt;td style="text-align: center"&gt;LONG_MIN&lt;/td&gt; &lt;td style="text-align: center"&gt;LONG_MAX&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style="text-align: center"&gt;strtoll()&lt;/td&gt; &lt;td style="text-align: center"&gt;LLONG_MIN&lt;/td&gt; &lt;td style="text-align: center"&gt;LLONG_MAX&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style="text-align: center"&gt;strtoimax()&lt;/td&gt; &lt;td style="text-align: center"&gt;INTMAX_MIN&lt;/td&gt; &lt;td style="text-align: center"&gt;INTMAX_MAX&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td style="text-align: center"&gt;strtoq()&lt;/td&gt; &lt;td style="text-align: center"&gt;LLONG_MIN&lt;/td&gt; &lt;td style="text-align: center"&gt;LLONG_MAX&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/blockquote&gt;&lt;p&gt;Based on this, the two ways to check for an overflow are to check if &lt;code&gt;strtol&lt;/code&gt; returns 0 or to check if &lt;code&gt;errno&lt;/code&gt; is set to &lt;code&gt;ERANGE&lt;/code&gt;. There’s another simple case where &lt;code&gt;strtol&lt;/code&gt; returns 0 specifically if the input string to &lt;code&gt;strtol&lt;/code&gt; is &lt;code&gt;"0"&lt;/code&gt;, so in order to accurately detect range errors, we must check for &lt;code&gt;ERANGE&lt;/code&gt;. This isn’t quite so simple either however, as if no error has occurred, &lt;code&gt;strtol&lt;/code&gt; will not change the value of &lt;code&gt;errno&lt;/code&gt;. If this happens, and some previous code has set &lt;code&gt;errno&lt;/code&gt; to &lt;code&gt;ERANGE&lt;/code&gt; you will erroneously think that a range error has occurred. So now in order to check for range errors you must reset &lt;code&gt;errno&lt;/code&gt; to a value that indicates that no error has occurred. Now, what value is that? Thankfully, &lt;a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/errno.html" title="errno - error return value"&gt;POSIX.1-2008&lt;/a&gt; has considered this possibility, and defined that “No function in this volume of POSIX.1-2008 shall set errno to 0,” meaning that no error in all of POSIX will have the value 0. So now we can do the following:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strtol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ERANGE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;LONG_MIN&lt;/span&gt;: &lt;span class="c1"&gt;// underflow&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;LONG_MAX&lt;/span&gt;: &lt;span class="c1"&gt;// overflow&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;default:&lt;/span&gt; &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// impossible&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// something else happened. die die die&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But wait, there’s more! This works fine for detecting range errors, but fails to detect garbage at the end of the string. Thankfully, &lt;code&gt;strtol&lt;/code&gt; lets us handle this too via it’s &lt;code&gt;char **endptr&lt;/code&gt; argument.&lt;/p&gt;&lt;blockquote&gt; &lt;p&gt;If endptr is not NULL, strtol() stores the address of the first invalid character in *endptr. If there were no digits at all, however, strtol() stores the original value of str in *endptr. (Thus, if *str is not `\0’ but **endptr is `\0’ on return, the entire string was valid.)&lt;/p&gt; &lt;/blockquote&gt;&lt;p&gt;Using this, we can detect if there was garbage at the end of the string by passing in a &lt;code&gt;char **&lt;/code&gt; value for &lt;code&gt;endptr&lt;/code&gt;.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;endptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strtol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;endptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ERANGE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;LONG_MIN&lt;/span&gt;: &lt;span class="c1"&gt;// underflow&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;LONG_MAX&lt;/span&gt;: &lt;span class="c1"&gt;// overflow&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;default:&lt;/span&gt; &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// impossible&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// something else happened. die die die&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;endptr&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;\\&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// garbage at end of string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now we’ve turned a relatively simple one-line call to &lt;code&gt;atoi&lt;/code&gt; into twenty lines of code. &lt;a href="http://www.fmylife.com" title="Fuck my Life"&gt;FML&lt;/a&gt;&lt;/p&gt;&lt;h2 id="enter-strtonum"&gt;Enter strtonum&lt;/h2&gt;&lt;p&gt;The great folks over at &lt;a href="http://openbsd.org/"&gt;OpenBSD&lt;/a&gt; have made a nice replacement for &lt;code&gt;strtol&lt;/code&gt; which fixes all of the issues discussed. Called &lt;a href="http://www.openbsd.org/cgi-bin/man.cgi?query=strtonum" title="strtonum - reliably convert string value to an integer"&gt;strtonum&lt;/a&gt;, the function doesn’t allow trailing characters and makes it easy to determine if a range error has occurred. The one drawback is that &lt;code&gt;strtonum&lt;/code&gt; is an OpenBSD extension, and so is not found in any standard. If you want to use &lt;code&gt;strtonum&lt;/code&gt; on other platforms, you can grab the source &lt;a href="http://anoncvs.estpak.ee/cgi-bin/cgit/openbsd-src/tree/lib/libc/stdlib/strtonum.c"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;div class="footnotes"&gt; &lt;ol&gt; &lt;li id="fn:strtol-and-friends"&gt; &lt;p&gt;&lt;code&gt;strtol&lt;/code&gt;, short for “string to long” is only one of a few of such functions for converting from a string to a number. Also in this family are &lt;a href="http://man7.org/linux/man-pages/man3/strtol.3.html" title="strtol(3)"&gt;strtoimax&lt;/a&gt;, &lt;a href="http://man7.org/linux/man-pages/man3/strtol.3.html" title="strtol(3)"&gt;strtoll&lt;/a&gt; and &lt;a href="http://man7.org/linux/man-pages/man3/strtol.3.html" title="strtol(3)"&gt;strtoq&lt;/a&gt;. &lt;a href="#fnref:strtol-and-friends" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; </content> </entry> <entry><title>Designing Robust Build Systems</title><link href="http://rus.har.mn/blog/2012-05-18/designing-robust-build-systems"/> <updated>2012-05-18T00:00:00-04:00</updated> <id>tag:rus.har.mn,2012-05-18:/blog/2012-05-18/designing-robust-build-systems</id> <category scheme="http://rus.har.mn/tag" term="machinae"/> <content type="html">&lt;p&gt;A few years ago, I took a hard look at the current state of the art of build systems. The ones I looked at were the ones that I had heard of, specifically &lt;a href="http://dev/null"&gt;&lt;abbr title="A utility that automatically builds executable programs and libraries from source code by reading files called makefiles which specify how to derive the target program."&gt;Make&lt;/abbr&gt;&lt;/a&gt;, &lt;a href="http://dev/null"&gt;SCons&lt;/a&gt;, &lt;a href="http://dev/null"&gt;CMake&lt;/a&gt;, &lt;a href="http://dev/null"&gt;Jam&lt;/a&gt;. I slowly came to the realization every build system designer since the creators of &lt;abbr title="A utility that automatically builds executable programs and libraries from source code by reading files called makefiles which specify how to derive the target program."&gt;Make&lt;/abbr&gt; (which arguably does it right) have been thinking about building software all wrong.&lt;/p&gt;&lt;p&gt;Understand that the entire purpose of a build system is to compile your complex piece of software &lt;em&gt;correctly every time&lt;/em&gt;. Peter Miller discusses the importance of a correct build system in his paper &lt;a href="http://aegis.sourceforge.net/auug97.pdf"&gt;Recursive &lt;abbr title="A utility that automatically builds executable programs and libraries from source code by reading files called makefiles which specify how to derive the target program."&gt;Make&lt;/abbr&gt; Considered Harmful&lt;/a&gt;. In order to build correctly always, the system must fully understand the &lt;em&gt;dependency tree&lt;/em&gt; of the software. This dependency tree is, composed in part by any &lt;code&gt;#include&lt;/code&gt; directives in your C files. For example, lets say we’re making a simple game, with a dependency tree like the following:&lt;/p&gt;&lt;!-- TODO: Don't use &lt;center&gt; --&gt; &lt;center&gt; &lt;div class="graphviz-wrapper"&gt;&lt;!-- Generated by graphviz version 2.26.3 (20100126.1600) --&gt; &lt;!-- Title: example1 Pages: 1 --&gt; &lt;svg role="img" aria-label="" width="408pt" height="98pt" viewbox="0.00 0.00 408.00 98.00"&gt; &lt;title&gt;&lt;/title&gt; &lt;desc&gt; digraph example1 { rankdir = &amp;quot;LR&amp;quot;;common_h [label = &amp;quot;common.h&amp;quot;]; player_h [label = &amp;quot;player.h&amp;quot;]; game_c [label = &amp;quot;game.c&amp;quot;]; game_exe [label = &amp;quot;game.exe&amp;quot;];common_h -&amp;gt; game_c; player_h -&amp;gt; game_c; game_c -&amp;gt; game_exe; } &lt;/desc&gt;&lt;g id="graph1" class="graph" transform="scale(1 1) rotate(0) translate(4 94)"&gt; &lt;title&gt;example1&lt;/title&gt; &lt;polygon fill="white" stroke="white" points="-4,5 -4,-94 405,-94 405,5 -4,5" /&gt; &lt;!-- common_h --&gt; &lt;g id="node1" class="node"&gt;&lt;title&gt;common_h&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="61" cy="-72" rx="61.1496" ry="18" /&gt; &lt;text text-anchor="middle" x="61" y="-67.9" font-family="Times Roman,serif" font-size="14.00"&gt;common.h&lt;/text&gt; &lt;/g&gt; &lt;!-- game_c --&gt; &lt;g id="node3" class="node"&gt;&lt;title&gt;game_c&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="203" cy="-45" rx="45.1673" ry="18" /&gt; &lt;text text-anchor="middle" x="203" y="-40.9" font-family="Times Roman,serif" font-size="14.00"&gt;game.c&lt;/text&gt; &lt;/g&gt; &lt;!-- common_h&amp;#45;&amp;gt;game_c --&gt; &lt;g id="edge2" class="edge"&gt;&lt;title&gt;common_h&amp;#45;&amp;gt;game_c&lt;/title&gt; &lt;path fill="none" stroke="black" d="M112.667,-62.176C125.557,-59.7251 139.367,-57.0992 152.214,-54.6565" /&gt; &lt;polygon fill="black" stroke="black" points="153.104,-58.05 162.274,-52.7436 151.797,-51.1732 153.104,-58.05" /&gt; &lt;/g&gt; &lt;!-- player_h --&gt; &lt;g id="node2" class="node"&gt;&lt;title&gt;player_h&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="61" cy="-18" rx="48.8383" ry="18" /&gt; &lt;text text-anchor="middle" x="61" y="-13.9" font-family="Times Roman,serif" font-size="14.00"&gt;player.h&lt;/text&gt; &lt;/g&gt; &lt;!-- player_h&amp;#45;&amp;gt;game_c --&gt; &lt;g id="edge4" class="edge"&gt;&lt;title&gt;player_h&amp;#45;&amp;gt;game_c&lt;/title&gt; &lt;path fill="none" stroke="black" d="M105.151,-26.395C120.111,-29.2395 136.936,-32.4386 152.361,-35.3714" /&gt; &lt;polygon fill="black" stroke="black" points="151.783,-38.8242 162.261,-37.2538 153.091,-31.9474 151.783,-38.8242" /&gt; &lt;/g&gt; &lt;!-- game_exe --&gt; &lt;g id="node4" class="node"&gt;&lt;title&gt;game_exe&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="342" cy="-45" rx="57.1737" ry="18" /&gt; &lt;text text-anchor="middle" x="342" y="-40.9" font-family="Times Roman,serif" font-size="14.00"&gt;game.exe&lt;/text&gt; &lt;/g&gt; &lt;!-- game_c&amp;#45;&amp;gt;game_exe --&gt; &lt;g id="edge6" class="edge"&gt;&lt;title&gt;game_c&amp;#45;&amp;gt;game_exe&lt;/title&gt; &lt;path fill="none" stroke="black" d="M248.129,-45C256.538,-45 265.492,-45 274.404,-45" /&gt; &lt;polygon fill="black" stroke="black" points="274.418,-48.5001 284.418,-45 274.418,-41.5001 274.418,-48.5001" /&gt; &lt;/g&gt; &lt;/g&gt; &lt;/svg&gt; &lt;/div&gt; &lt;/center&gt;&lt;p&gt;This means that before &lt;code&gt;game.c&lt;/code&gt; can be built, &lt;code&gt;common.h&lt;/code&gt; and &lt;code&gt;player.h&lt;/code&gt; must exist, and before &lt;code&gt;game.exe&lt;/code&gt; can be built, &lt;code&gt;game.c&lt;/code&gt; must exist. Additionally, &lt;code&gt;game.exe&lt;/code&gt; can be said to &lt;em&gt;transitively depend&lt;/em&gt; upon &lt;code&gt;common.h&lt;/code&gt; and &lt;code&gt;player.h&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Now, this works fine always because you wrote &lt;code&gt;common.h&lt;/code&gt;, &lt;code&gt;player.h&lt;/code&gt; and &lt;code&gt;game.c&lt;/code&gt;, but lets say you were writing a game, and wanted to create a domain-specific language to express the levels. This &lt;abbr title="Domain specific language"&gt;DSL&lt;/abbr&gt;’s compiler would output C code, which would then be used from within your code. This can be expressed like so:&lt;/p&gt;&lt;center&gt; &lt;div class="graphviz-wrapper"&gt;&lt;!-- Generated by graphviz version 2.26.3 (20100126.1600) --&gt; &lt;!-- Title: example2 Pages: 1 --&gt; &lt;svg role="img" aria-label="" width="360pt" height="332pt" viewbox="0.00 0.00 359.61 332.00"&gt; &lt;title&gt;&lt;/title&gt; &lt;desc&gt; digraph example2 { common_h [label = &amp;quot;common.h&amp;quot;]; player_h [label = &amp;quot;player.h&amp;quot;]; game_c [label = &amp;quot;game.c&amp;quot;]; game_exe [label = &amp;quot;game.exe&amp;quot;];levcomp_c [label = &amp;quot;level_compiler.c&amp;quot;]; levcomp [label = &amp;quot;level_compiler.exe&amp;quot;]; levels_c [label = &amp;quot;levels.c&amp;quot;];common_h -&amp;gt; levcomp_c -&amp;gt; levcomp -&amp;gt; levels_c; player_h -&amp;gt; levels_c [style = &amp;quot;dashed&amp;quot;]; common_h -&amp;gt; levels_c [style = &amp;quot;dashed&amp;quot;]; levels_c -&amp;gt; game_exe;common_h -&amp;gt; game_c; player_h -&amp;gt; game_c; game_c -&amp;gt; game_exe; } &lt;/desc&gt;&lt;g id="graph1" class="graph" transform="scale(1 1) rotate(0) translate(4 328)"&gt; &lt;title&gt;example2&lt;/title&gt; &lt;polygon fill="white" stroke="white" points="-4,5 -4,-328 356.614,-328 356.614,5 -4,5" /&gt; &lt;!-- common_h --&gt; &lt;g id="node1" class="node"&gt;&lt;title&gt;common_h&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="228.629" cy="-306" rx="61.1496" ry="18" /&gt; &lt;text text-anchor="middle" x="228.629" y="-301.9" font-family="Times Roman,serif" font-size="14.00"&gt;common.h&lt;/text&gt; &lt;/g&gt; &lt;!-- game_c --&gt; &lt;g id="node3" class="node"&gt;&lt;title&gt;game_c&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="63.6286" cy="-90" rx="45.1673" ry="18" /&gt; &lt;text text-anchor="middle" x="63.6286" y="-85.9" font-family="Times Roman,serif" font-size="14.00"&gt;game.c&lt;/text&gt; &lt;/g&gt; &lt;!-- common_h&amp;#45;&amp;gt;game_c --&gt; &lt;g id="edge12" class="edge"&gt;&lt;title&gt;common_h&amp;#45;&amp;gt;game_c&lt;/title&gt; &lt;path fill="none" stroke="black" d="M181.041,-294.443C127.553,-278.623 43.2819,-244.523 5.62861,-180 -2.43571,-166.181 -0.757193,-158.67 5.62861,-144 11.0879,-131.458 21.0548,-120.513 31.2047,-111.816" /&gt; &lt;polygon fill="black" stroke="black" points="33.6811,-114.318 39.3014,-105.336 29.307,-108.852 33.6811,-114.318" /&gt; &lt;/g&gt; &lt;!-- levcomp_c --&gt; &lt;g id="node5" class="node"&gt;&lt;title&gt;levcomp_c&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="228.629" cy="-234" rx="86.1654" ry="18" /&gt; &lt;text text-anchor="middle" x="228.629" y="-229.9" font-family="Times Roman,serif" font-size="14.00"&gt;level_compiler.c&lt;/text&gt; &lt;/g&gt; &lt;!-- common_h&amp;#45;&amp;gt;levcomp_c --&gt; &lt;g id="edge2" class="edge"&gt;&lt;title&gt;common_h&amp;#45;&amp;gt;levcomp_c&lt;/title&gt; &lt;path fill="none" stroke="black" d="M228.629,-287.831C228.629,-280.131 228.629,-270.974 228.629,-262.417" /&gt; &lt;polygon fill="black" stroke="black" points="232.129,-262.413 228.629,-252.413 225.129,-262.413 232.129,-262.413" /&gt; &lt;/g&gt; &lt;!-- levels_c --&gt; &lt;g id="node7" class="node"&gt;&lt;title&gt;levels_c&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="200.629" cy="-90" rx="46.0565" ry="18" /&gt; &lt;text text-anchor="middle" x="200.629" y="-85.9" font-family="Times Roman,serif" font-size="14.00"&gt;levels.c&lt;/text&gt; &lt;/g&gt; &lt;!-- common_h&amp;#45;&amp;gt;levels_c --&gt; &lt;g id="edge8" class="edge"&gt;&lt;title&gt;common_h&amp;#45;&amp;gt;levels_c&lt;/title&gt; &lt;path fill="none" stroke="black" stroke-dasharray="5,2" d="M269.058,-292.49C288.545,-283.915 310.487,-270.821 323.629,-252 351.277,-212.402 362.704,-183.992 335.629,-144 317.652,-117.448 284.278,-103.951 255.212,-97.0903" /&gt; &lt;polygon fill="black" stroke="black" points="255.655,-93.6057 245.143,-94.9298 254.187,-100.45 255.655,-93.6057" /&gt; &lt;/g&gt; &lt;!-- player_h --&gt; &lt;g id="node2" class="node"&gt;&lt;title&gt;player_h&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="63.6286" cy="-162" rx="48.8383" ry="18" /&gt; &lt;text text-anchor="middle" x="63.6286" y="-157.9" font-family="Times Roman,serif" font-size="14.00"&gt;player.h&lt;/text&gt; &lt;/g&gt; &lt;!-- player_h&amp;#45;&amp;gt;game_c --&gt; &lt;g id="edge14" class="edge"&gt;&lt;title&gt;player_h&amp;#45;&amp;gt;game_c&lt;/title&gt; &lt;path fill="none" stroke="black" d="M63.6286,-143.831C63.6286,-136.131 63.6286,-126.974 63.6286,-118.417" /&gt; &lt;polygon fill="black" stroke="black" points="67.1287,-118.413 63.6286,-108.413 60.1287,-118.413 67.1287,-118.413" /&gt; &lt;/g&gt; &lt;!-- player_h&amp;#45;&amp;gt;levels_c --&gt; &lt;g id="edge6" class="edge"&gt;&lt;title&gt;player_h&amp;#45;&amp;gt;levels_c&lt;/title&gt; &lt;path fill="none" stroke="black" stroke-dasharray="5,2" d="M92.0151,-147.082C112.818,-136.149 141.243,-121.21 163.795,-109.358" /&gt; &lt;polygon fill="black" stroke="black" points="165.523,-112.403 172.747,-104.653 162.267,-106.207 165.523,-112.403" /&gt; &lt;/g&gt; &lt;!-- game_exe --&gt; &lt;g id="node4" class="node"&gt;&lt;title&gt;game_exe&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="131.629" cy="-18" rx="57.1737" ry="18" /&gt; &lt;text text-anchor="middle" x="131.629" y="-13.9" font-family="Times Roman,serif" font-size="14.00"&gt;game.exe&lt;/text&gt; &lt;/g&gt; &lt;!-- game_c&amp;#45;&amp;gt;game_exe --&gt; &lt;g id="edge16" class="edge"&gt;&lt;title&gt;game_c&amp;#45;&amp;gt;game_exe&lt;/title&gt; &lt;path fill="none" stroke="black" d="M79.7437,-72.937C88.2564,-63.9235 98.8602,-52.6959 108.259,-42.7443" /&gt; &lt;polygon fill="black" stroke="black" points="110.835,-45.114 115.157,-35.4407 105.746,-40.3076 110.835,-45.114" /&gt; &lt;/g&gt; &lt;!-- levcomp --&gt; &lt;g id="node6" class="node"&gt;&lt;title&gt;levcomp&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="228.629" cy="-162" rx="97.9784" ry="18" /&gt; &lt;text text-anchor="middle" x="228.629" y="-157.9" font-family="Times Roman,serif" font-size="14.00"&gt;level_compiler.exe&lt;/text&gt; &lt;/g&gt; &lt;!-- levcomp_c&amp;#45;&amp;gt;levcomp --&gt; &lt;g id="edge3" class="edge"&gt;&lt;title&gt;levcomp_c&amp;#45;&amp;gt;levcomp&lt;/title&gt; &lt;path fill="none" stroke="black" d="M228.629,-215.831C228.629,-208.131 228.629,-198.974 228.629,-190.417" /&gt; &lt;polygon fill="black" stroke="black" points="232.129,-190.413 228.629,-180.413 225.129,-190.413 232.129,-190.413" /&gt; &lt;/g&gt; &lt;!-- levcomp&amp;#45;&amp;gt;levels_c --&gt; &lt;g id="edge4" class="edge"&gt;&lt;title&gt;levcomp&amp;#45;&amp;gt;levels_c&lt;/title&gt; &lt;path fill="none" stroke="black" d="M221.563,-143.831C218.456,-135.841 214.738,-126.282 211.304,-117.451" /&gt; &lt;polygon fill="black" stroke="black" points="214.481,-115.965 207.595,-107.913 207.957,-118.502 214.481,-115.965" /&gt; &lt;/g&gt; &lt;!-- levels_c&amp;#45;&amp;gt;game_exe --&gt; &lt;g id="edge10" class="edge"&gt;&lt;title&gt;levels_c&amp;#45;&amp;gt;game_exe&lt;/title&gt; &lt;path fill="none" stroke="black" d="M184.277,-72.937C175.639,-63.9235 164.879,-52.6959 155.342,-42.7443" /&gt; &lt;polygon fill="black" stroke="black" points="157.789,-40.2389 148.343,-35.4407 152.735,-45.0823 157.789,-40.2389" /&gt; &lt;/g&gt; &lt;/g&gt; &lt;/svg&gt; &lt;/div&gt; &lt;/center&gt;&lt;p&gt;The dependencies &lt;code&gt;common.h → levels.c&lt;/code&gt; and &lt;code&gt;player.h → levels.c&lt;/code&gt; is not detected in this case unless you explicitly write that dependency into your build system. That is undesirable however as doing so is fragile. What you really want, is to &lt;em&gt;dynamically&lt;/em&gt; introduce dependencies into the build system. In other words, in order for a build system to be &lt;em&gt;correct&lt;/em&gt;, it sometimes must be able to detect dependencies while it’s traversing the dependency tree it is detecting dependencies for!&lt;/p&gt;&lt;p&gt;&lt;abbr title="GNU Compiler Collection"&gt;GCC&lt;/abbr&gt; provides a facility for outputting a &lt;abbr title="A utility that automatically builds executable programs and libraries from source code by reading files called makefiles which specify how to derive the target program."&gt;Make&lt;/abbr&gt; compatible list of a file’s dependencies with the &lt;code&gt;-M&lt;/code&gt; option. From &lt;abbr title="GNU Compiler Collection"&gt;GCC&lt;/abbr&gt;’s &lt;a href="http://gcc.gnu.org/onlinedocs/cpp/Invocation.html#index-M-141"&gt;docs&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;-M Instead of outputting the result of preprocessing, output a rule suitable for make describing the dependencies of the main source file. &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;GNU &lt;abbr title="A utility that automatically builds executable programs and libraries from source code by reading files called makefiles which specify how to derive the target program."&gt;Make&lt;/abbr&gt; has introduced the &lt;code&gt;include&lt;/code&gt; extension that allows you to generate and include these files, albeit in a more limited fashion. From the &lt;a href="http://www.gnu.org/software/make/manual/html_node/Remaking-Makefiles.html#Remaking-Makefiles"&gt;include&lt;/a&gt; directive’s documentation:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;After reading in all makefiles, make will consider each as a goal target and attempt to update it. If a makefile has a rule which says how to update it (found either in that very makefile or in another one) or if an implicit rule applies to it (see Using Implicit Rules), it will be updated if necessary. After all makefiles have been checked, if any have actually been changed, make starts with a clean slate and reads all the makefiles over again. &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This mechanism can be leveraged to create a limited solution to the &lt;em&gt;traversal-time dependency detection&lt;/em&gt; problem, which our game suffered from. Unfortunately, this works only for a single “level” of traversal-time dependency detection. E.g. the following does not work:&lt;/p&gt;&lt;center&gt; &lt;div class="graphviz-wrapper"&gt;&lt;!-- Generated by graphviz version 2.26.3 (20100126.1600) --&gt; &lt;!-- Title: example3 Pages: 1 --&gt; &lt;svg role="img" aria-label="" width="154pt" height="404pt" viewbox="0.00 0.00 154.00 404.00"&gt; &lt;title&gt;&lt;/title&gt; &lt;desc&gt; digraph example3 { //rankdir = &amp;quot;LR&amp;quot;;a_c [label = &amp;quot;a.c&amp;quot;]; a_exe [label = &amp;quot;a.exe&amp;quot;]; b_c [label = &amp;quot;b.c&amp;quot;]; b_exe [label = &amp;quot;b.exe&amp;quot;];c_h [label = &amp;quot;c.h&amp;quot;]; c_c [label = &amp;quot;c.c&amp;quot;]; c_exe [label = &amp;quot;c.exe&amp;quot;];a_c -&amp;gt; a_exe -&amp;gt; b_c -&amp;gt; b_exe -&amp;gt; c_c -&amp;gt; c_exe; c_h -&amp;gt; c_c; } &lt;/desc&gt;&lt;g id="graph1" class="graph" transform="scale(1 1) rotate(0) translate(4 400)"&gt; &lt;title&gt;example3&lt;/title&gt; &lt;polygon fill="white" stroke="white" points="-4,5 -4,-400 151,-400 151,5 -4,5" /&gt; &lt;!-- a_c --&gt; &lt;g id="node1" class="node"&gt;&lt;title&gt;a_c&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="37" cy="-378" rx="27" ry="18" /&gt; &lt;text text-anchor="middle" x="37" y="-373.9" font-family="Times Roman,serif" font-size="14.00"&gt;a.c&lt;/text&gt; &lt;/g&gt; &lt;!-- a_exe --&gt; &lt;g id="node2" class="node"&gt;&lt;title&gt;a_exe&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="37" cy="-306" rx="36.8288" ry="18" /&gt; &lt;text text-anchor="middle" x="37" y="-301.9" font-family="Times Roman,serif" font-size="14.00"&gt;a.exe&lt;/text&gt; &lt;/g&gt; &lt;!-- a_c&amp;#45;&amp;gt;a_exe --&gt; &lt;g id="edge2" class="edge"&gt;&lt;title&gt;a_c&amp;#45;&amp;gt;a_exe&lt;/title&gt; &lt;path fill="none" stroke="black" d="M37,-359.831C37,-352.131 37,-342.974 37,-334.417" /&gt; &lt;polygon fill="black" stroke="black" points="40.5001,-334.413 37,-324.413 33.5001,-334.413 40.5001,-334.413" /&gt; &lt;/g&gt; &lt;!-- b_c --&gt; &lt;g id="node3" class="node"&gt;&lt;title&gt;b_c&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="37" cy="-234" rx="27" ry="18" /&gt; &lt;text text-anchor="middle" x="37" y="-229.9" font-family="Times Roman,serif" font-size="14.00"&gt;b.c&lt;/text&gt; &lt;/g&gt; &lt;!-- a_exe&amp;#45;&amp;gt;b_c --&gt; &lt;g id="edge3" class="edge"&gt;&lt;title&gt;a_exe&amp;#45;&amp;gt;b_c&lt;/title&gt; &lt;path fill="none" stroke="black" d="M37,-287.831C37,-280.131 37,-270.974 37,-262.417" /&gt; &lt;polygon fill="black" stroke="black" points="40.5001,-262.413 37,-252.413 33.5001,-262.413 40.5001,-262.413" /&gt; &lt;/g&gt; &lt;!-- b_exe --&gt; &lt;g id="node4" class="node"&gt;&lt;title&gt;b_exe&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="37" cy="-162" rx="36.8288" ry="18" /&gt; &lt;text text-anchor="middle" x="37" y="-157.9" font-family="Times Roman,serif" font-size="14.00"&gt;b.exe&lt;/text&gt; &lt;/g&gt; &lt;!-- b_c&amp;#45;&amp;gt;b_exe --&gt; &lt;g id="edge4" class="edge"&gt;&lt;title&gt;b_c&amp;#45;&amp;gt;b_exe&lt;/title&gt; &lt;path fill="none" stroke="black" d="M37,-215.831C37,-208.131 37,-198.974 37,-190.417" /&gt; &lt;polygon fill="black" stroke="black" points="40.5001,-190.413 37,-180.413 33.5001,-190.413 40.5001,-190.413" /&gt; &lt;/g&gt; &lt;!-- c_c --&gt; &lt;g id="node6" class="node"&gt;&lt;title&gt;c_c&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="78" cy="-90" rx="27" ry="18" /&gt; &lt;text text-anchor="middle" x="78" y="-85.9" font-family="Times Roman,serif" font-size="14.00"&gt;c.c&lt;/text&gt; &lt;/g&gt; &lt;!-- b_exe&amp;#45;&amp;gt;c_c --&gt; &lt;g id="edge5" class="edge"&gt;&lt;title&gt;b_exe&amp;#45;&amp;gt;c_c&lt;/title&gt; &lt;path fill="none" stroke="black" d="M46.925,-144.571C51.81,-135.992 57.7983,-125.476 63.2097,-115.973" /&gt; &lt;polygon fill="black" stroke="black" points="66.2595,-117.691 68.1664,-107.269 60.1766,-114.227 66.2595,-117.691" /&gt; &lt;/g&gt; &lt;!-- c_h --&gt; &lt;g id="node5" class="node"&gt;&lt;title&gt;c_h&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="119" cy="-162" rx="27" ry="18" /&gt; &lt;text text-anchor="middle" x="119" y="-157.9" font-family="Times Roman,serif" font-size="14.00"&gt;c.h&lt;/text&gt; &lt;/g&gt; &lt;!-- c_h&amp;#45;&amp;gt;c_c --&gt; &lt;g id="edge8" class="edge"&gt;&lt;title&gt;c_h&amp;#45;&amp;gt;c_c&lt;/title&gt; &lt;path fill="none" stroke="black" d="M109.284,-144.937C104.331,-136.239 98.2039,-125.48 92.6887,-115.795" /&gt; &lt;polygon fill="black" stroke="black" points="95.6366,-113.898 87.6467,-106.941 89.5537,-117.362 95.6366,-113.898" /&gt; &lt;/g&gt; &lt;!-- c_exe --&gt; &lt;g id="node7" class="node"&gt;&lt;title&gt;c_exe&lt;/title&gt; &lt;ellipse fill="none" stroke="black" cx="78" cy="-18" rx="36.1339" ry="18" /&gt; &lt;text text-anchor="middle" x="78" y="-13.9" font-family="Times Roman,serif" font-size="14.00"&gt;c.exe&lt;/text&gt; &lt;/g&gt; &lt;!-- c_c&amp;#45;&amp;gt;c_exe --&gt; &lt;g id="edge6" class="edge"&gt;&lt;title&gt;c_c&amp;#45;&amp;gt;c_exe&lt;/title&gt; &lt;path fill="none" stroke="black" d="M78,-71.8314C78,-64.131 78,-54.9743 78,-46.4166" /&gt; &lt;polygon fill="black" stroke="black" points="81.5001,-46.4132 78,-36.4133 74.5001,-46.4133 81.5001,-46.4132" /&gt; &lt;/g&gt; &lt;/g&gt; &lt;/svg&gt; &lt;/div&gt; &lt;/center&gt;&lt;p&gt;I’ve built a functional build system for &lt;abbr title="A single-player roguelike video game originally released in 1987."&gt;Nethack&lt;/abbr&gt; which leverages these concepts. You can see an abbreviated dependency graph for &lt;abbr title="A single-player roguelike video game originally released in 1987."&gt;Nethack&lt;/abbr&gt; &lt;a href="/files/nethack-dependencies.pdf"&gt;here&lt;/a&gt;, and I also gave a presentation on the &lt;abbr title="A single-player roguelike video game originally released in 1987."&gt;Nethack&lt;/abbr&gt; build system which can be seen &lt;a href="http://prezi.com/vzxavg014qlf/nethack-compilation/"&gt;here&lt;/a&gt;. The build system itself is hosted &lt;a href="https://github.com/ComputerScienceHouse/bingehack"&gt;here&lt;/a&gt;.&lt;/p&gt;</content> </entry> <entry><title>Getting Public Information From Latitude</title><link href="http://rus.har.mn/blog/2011-12-13/latitude-public-api"/> <updated>2011-12-13T00:00:00-05:00</updated> <id>tag:rus.har.mn,2011-12-13:/blog/2011-12-13/latitude-public-api</id> <category scheme="http://rus.har.mn/tag" term="machinae"/> <content type="html">&lt;p&gt;In making this website, I wanted to put on my &lt;a href="/#latitude"&gt;homepage&lt;/a&gt; my Google Latitude determined current location (at the statewide level). Google provides the &lt;a href="http://code.google.com/apis/latitude/"&gt;Latitude &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt;&lt;/a&gt;, but this is only for authenticated users, and therefore cannot be used by people wishing to publicly publish their location.&lt;/p&gt;&lt;p&gt;The Latitude website provides a location widget that can be placed on your website to show your current location, but it uses an undocumented &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt;. After a bit of effort reverse engineering the location widget, I eventually came up with the following &lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;http://www.google.com/latitude/apps/badge/api?user=4048757213362106746&amp;amp;type=json &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is an undocumented &lt;abbr title="Application Programming Interface"&gt;API&lt;/abbr&gt; by Google, and notably cannot use JSONP. That means that I couldn’t use that &lt;abbr title="Uniform Resource Locator"&gt;URL&lt;/abbr&gt; directly from within my static-page &lt;abbr title="A blog-aware, static site generator in Ruby"&gt;Jekyll&lt;/abbr&gt;-generated website thanks to the &lt;a href="http://en.wikipedia.org/wiki/Same-origin_policy"&gt;same origin policy&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In order to work around this rather severe limitation, I leveraged the power of &lt;a href="http://en.wikipedia.org/wiki/Yahoo!_query_language"&gt;&lt;abbr title="Yahoo! query language"&gt;YQL&lt;/abbr&gt;&lt;/a&gt;, which is able to effectively turn a &lt;abbr title="JavaScript Object Notation"&gt;JSON&lt;/abbr&gt;-only data source into a JSONP data source. At the end of the day, I’m able to retrieve my current location from Latitude by going through Yahoo with the following code:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="javascript"&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doLatitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.google.com/latitude/apps/badge/api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;json&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;full_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;?&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://query.yahooapis.com/v1/public/yql&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jsonp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SELECT * FROM json WHERE url=&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;full_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;json&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;features&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;span style=\&amp;quot;font-style:italic\&amp;quot;&amp;gt;location unavailable&amp;lt;/span&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverseGeocode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;textStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorThrown&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textStatus&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;errorThrown&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content> </entry> <entry><title>Determining Mount Status</title><link href="http://rus.har.mn/blog/2011-06-24/getmntinfo"/> <updated>2011-06-24T00:00:00-04:00</updated> <id>tag:rus.har.mn,2011-06-24:/blog/2011-06-24/getmntinfo</id> <category scheme="http://rus.har.mn/tag" term="machinae"/> <content type="html">&lt;p&gt;I’ve fairly frequently ran into the issue while scripting a mount action of determining if what I want to mount is already mounted. On Linux, you could parse &lt;code&gt;/proc/mounts&lt;/code&gt;, but that’s neither cross-platform, nor is the format of &lt;code&gt;/proc/mounts&lt;/code&gt; guaranteed not to change. The same problem exists with parsing the output of the &lt;code&gt;mount&lt;/code&gt; command, the format of which not only is not guaranteed to remain the same, it in fact varies greatly between platforms.&lt;/p&gt;&lt;p&gt;To tackle this problem, I looked into how &lt;code&gt;mount&lt;/code&gt; gets it’s information. On BSD and friends, it uses a function called &lt;a href="http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man3/getmntinfo.3.html"&gt;&lt;code&gt;getmntinfo(3)&lt;/code&gt;&lt;/a&gt;. On Linux, it uses a function called &lt;a href="http://linux.die.net/man/3/getmntent"&gt;&lt;code&gt;getmntent(3)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Now that I knew how the different UNIXes that I cared to support got their mount information, I wrote up a program to retrieve and format this mount information.&lt;/p&gt;&lt;p&gt;Know that currently, I only support OS X, but I plan on supporting more operating systems in the future.&lt;/p&gt;&lt;p&gt;You can find the sources for my program on my &lt;a href="http://github.com/eatnumber1/getmntinfo"&gt;GitHub page&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Usage: getmntinfo [options] [format] -q, --quiet Produce no output -h, --help This help message -B, --bsize=SIZE Fundamental filesystem block size -I, --iosize=SIZE Optimal transfer block size -b, --blocks=COUNT Total data blocks in filesystem -F, --bfree=COUNT Free blocks in filesystem -a, --bavail=COUNT Free blocks avail to non-superuser -n, --files=COUNT Total file nodes in filesystem -e, --ffree=COUNT Free file nodes in filesystem -U, --fsid=ID Filesystem identifier -S, --fsid0=ID Top four bytes of filesystem identifier -T, --fsid1=ID Bottom four bytes of filesystem identifier -O, --owner=USER User that mounted the filesystem -g, --flags=FLAGS Copy of mount exported flags -s, --fssubtype=TYPE Filesystem sub-type (flavor) -t, --type=TYPE Type of filesystem -o, --mntonname=DIR Directory on which mounted -f, --mntfromname=NAME Mounted filesystem &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this program, determining if something is mounted in a script is as simple as&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;span class="k"&gt;if &lt;/span&gt;getmntinfo -t hfs -o / -f /dev/disk0s2 -q&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="k"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mounted&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not Mounted&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content> </entry> <entry><title>Object Oriented C</title><link href="http://rus.har.mn/blog/2010-10-01/object-oriented-c"/> <updated>2010-10-01T00:00:00-04:00</updated> <id>tag:rus.har.mn,2010-10-01:/blog/2010-10-01/object-oriented-c</id> <category scheme="http://rus.har.mn/tag" term="machinae"/> <content type="html">&lt;p&gt;So, thanks to &lt;a href="http://thirdcog.eu/pwcblocks/"&gt;blocks&lt;/a&gt;, Apple’s new extension to C, you can now do basic object-orientation. Have a look over at &lt;a href="http://gist.github.com/605457"&gt;GitHub&lt;/a&gt; for a short example on how to do it.&lt;/p&gt;&lt;p&gt;To break it down, an object is a struct, which contains both fields and &lt;a href="http://thirdcog.eu/pwcblocks/"&gt;blocks&lt;/a&gt; which act as the object’s methods.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;getValue&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a &lt;code&gt;String&lt;/code&gt; object which inherits from &lt;code&gt;Object&lt;/code&gt; and has a field &lt;code&gt;_value&lt;/code&gt;, and methods &lt;code&gt;getValue&lt;/code&gt; and &lt;code&gt;setValue&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;More to come… &lt;em&gt;maybe&lt;/em&gt;.&lt;/p&gt;</content> </entry> <entry><title>Bash Scripters: Stop using subshells to call functions.</title><link href="http://rus.har.mn/blog/2010-07-05/subshells"/> <updated>2010-07-05T00:00:00-04:00</updated> <id>tag:rus.har.mn,2010-07-05:/blog/2010-07-05/subshells</id> <category scheme="http://rus.har.mn/tag" term="machinae"/> <content type="html">&lt;p&gt;When writing shell scripts, it’s almost always better to call a function directly rather than using a subshell to call the function. The usual convention that I’ve seen is to echo the return value of the function and capture that output using a subshell. For example:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt; &lt;span class="k"&gt;function &lt;/span&gt;get_path&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/something&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;mypath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$(get_path)&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This works fine, but there is a significant speed overhead to using a subshell and there is a much faster alternative. Instead, you can just have a convention wherein a particular variable is always the return value of the function (I use &lt;em&gt;retval&lt;/em&gt;). This has the added benefit of also allowing you to return arrays from your functions.&lt;/p&gt;&lt;p&gt;If you don’t know what a subshell is, for the purposes of this blog post a subshell is another bash shell which is spawned whenever you use &lt;code&gt;$()&lt;/code&gt; or &lt;code&gt;` `&lt;/code&gt; and is used to execute the code you put inside.&lt;/p&gt;&lt;p&gt;I did some simple testing to allow you to observe the overhead. For two functionally equivalent scripts:&lt;/p&gt;&lt;p&gt;This one uses a subshell:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt; &lt;span class="k"&gt;function &lt;/span&gt;a&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo &lt;/span&gt;hello &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt; 10000&lt;span class="p"&gt;;&lt;/span&gt; i++ &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="k"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$(a)&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This one uses a variable:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt; &lt;span class="k"&gt;function &lt;/span&gt;a&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;retval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt; 10000&lt;span class="p"&gt;;&lt;/span&gt; i++ &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="k"&gt; &lt;/span&gt;a &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$retval&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The speed difference between these two is noticeable and significant.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="console"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;i in variable subshell&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;\n$i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; ./&lt;span class="nv"&gt;$i&lt;/span&gt; &amp;gt; /dev/null &lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="go"&gt;variable&lt;/span&gt;&lt;span class="go"&gt;real 0m0.367s&lt;/span&gt; &lt;span class="go"&gt;user 0m0.346s&lt;/span&gt; &lt;span class="go"&gt;sys 0m0.015s&lt;/span&gt;&lt;span class="go"&gt;subshell&lt;/span&gt;&lt;span class="go"&gt;real 0m11.937s&lt;/span&gt; &lt;span class="go"&gt;user 0m3.121s&lt;/span&gt; &lt;span class="go"&gt;sys 0m0.359s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, when using &lt;code&gt;variable&lt;/code&gt;, execution takes 0.367 seconds. &lt;code&gt;subshell&lt;/code&gt; however takes a full 11.937 seconds!&lt;/p&gt;</content> </entry> <entry><title>Reclaimable Userspace Cache Memory</title><link href="http://rus.har.mn/blog/2010-05-24/reclaimable-userspace-cache"/> <updated>2010-05-24T00:00:00-04:00</updated> <id>tag:rus.har.mn,2010-05-24:/blog/2010-05-24/reclaimable-userspace-cache</id> <category scheme="http://rus.har.mn/tag" term="machinae"/> <content type="html">&lt;p&gt;Caches are used all over your computer and for a huge variety of purposes. From apache to your physical CPU, cache is everywhere. Normally, when you want to cache something in memory, you &lt;code&gt;malloc(3)&lt;/code&gt; a chunk of memory, and store data in that. This works well in the small scale, but when you and 30+ others want to cache some information, that can quickly turn into a large amount of memory taken up by information which can be (easily, or not so easily) regenerated, and there is no way for the operating system to reclaim that memory when it really needs it.&lt;/p&gt;&lt;p&gt;In Java, that’s not the case. In Java, you can create &lt;a href="http://java.sun.com/javase/6/docs/api/java/lang/ref/SoftReference.html"&gt;SoftReference&lt;/a&gt; objects which are collected by the garbage collector when the VM is running out of memory. This exact idea is what I’d like to see in an operating system.&lt;/p&gt;&lt;p&gt;I propose a system, whereby you can allocate memory which the operating system can reclaim at it’s own discretion. This would work by using &lt;code&gt;malloc(3)&lt;/code&gt; to get some memory, then using &lt;code&gt;madvise(2)&lt;/code&gt; to advise to the kernel that this is reclaimable memory. Then, before you read or write to the memory, you lock the memory (for read or write) using reclock, during which time the kernel guarantees not to reclaim the memory. Then, when you are done reading / writing to that memory, recunlock it.&lt;/p&gt;&lt;p&gt;The function prototypes for the reclock and recunlock functions (which don’t exist) would be:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="c1"&gt;// Returns 0 on success, -1 if the memory&lt;/span&gt; &lt;span class="c1"&gt;// is no longer available&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;reclock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;perms&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;recunlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Under the hood, what would happen is that when you &lt;code&gt;madvise(2)&lt;/code&gt; the kernel that a particular space is reclaimable, it would add it to a list of reclaimable addresses. Then, when the system is low on memory, it would scan the list for a chunk of memory large enough, check that the memory isn’t locked (read next paragraph), mark that element in the list as reclaimed and with the pid that it was taken from, and give it to someone else.&lt;/p&gt;&lt;p&gt;Before simply giving a chunk of memory to someone else however, the kernel has to check to see if the memory is in use. In order to do that, there has to be a lock bit somewhere. I had originally thought to put it in the kernel’s memory, but &lt;a href="http://www.clockfort.com"&gt;Clockfort&lt;/a&gt; noted that locking and unlocking would require a system call, which would be quite slow. Therefore, the bit can be kept in the processes memory space, and simply read by the kernel before reclaiming memory. That way, reclock and recunlock can be implemented entirely without syscalls.&lt;/p&gt;</content> </entry> <entry><title>Pure Bash Cat</title><link href="http://rus.har.mn/blog/2009-05-28/pure-bash-cat"/> <updated>2009-05-28T00:00:00-04:00</updated> <id>tag:rus.har.mn,2009-05-28:/blog/2009-05-28/pure-bash-cat</id> <category scheme="http://rus.har.mn/tag" term="machinae"/> <content type="html">&lt;p&gt;So just to see if I could, I wrote a version of cat using pure bash. Pure bash is a bash script which uses nothing but bash builtins to accomplish it’s goal. To determine if a particular command is a builtin, you can use the command type -t “command” (the command type, is itself a builtin). Some notable commands which are builtins include echo, read, exec, return. Some notable commands which are not builtins include cat and grep. As follows is my implementation of cat in pure bash.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;span class="lineno"&gt; 1&lt;/span&gt; &lt;span class="c"&gt;#!/bin/bash&lt;/span&gt; &lt;span class="lineno"&gt; 2&lt;/span&gt; &lt;span class="nv"&gt;INPUTS&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${@:-&amp;quot;&lt;/span&gt;-&lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="lineno"&gt; 3&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;i in &lt;span class="s2"&gt;&amp;quot;${INPUTS[@]}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="lineno"&gt; 4&lt;/span&gt; &lt;span class="k"&gt; if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$i&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="lineno"&gt; 5&lt;/span&gt; &lt;span class="k"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec &lt;/span&gt;3&amp;lt; &lt;span class="s2"&gt;&amp;quot;$i&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit &lt;/span&gt;1 &lt;span class="lineno"&gt; 6&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="lineno"&gt; 7&lt;/span&gt; &lt;span class="k"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec &lt;/span&gt;3&amp;lt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;0 &lt;span class="lineno"&gt; 8&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt; &lt;span class="lineno"&gt; 9&lt;/span&gt; &lt;span class="k"&gt; while &lt;/span&gt;&lt;span class="nb"&gt;read&lt;/span&gt; -ru 3&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="lineno"&gt;10&lt;/span&gt; &lt;span class="k"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -E &lt;span class="s2"&gt;&amp;quot;$REPLY&amp;quot;&lt;/span&gt; &lt;span class="lineno"&gt;11&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="lineno"&gt;12&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, keep reading if you want a small lesson in advanced bash. I’ll go line by line to explain what this is doing.&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Line 1 is the &lt;a href="http://en.wikipedia.org/wiki/Shebang_%28Unix%29"&gt;shebang&lt;/a&gt;&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;span class="nv"&gt;INPUTS&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${@:-&amp;quot;&lt;/span&gt;-&lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Line 2 assigns the array variable INPUTS either the arguments provided on the command line if they exist, or the single character &lt;code&gt;-&lt;/code&gt;. The way this happens is as follows: &lt;code&gt;$@&lt;/code&gt; is the variable to reference the &lt;em&gt;positional parameters&lt;/em&gt; (the arguments to your program). If you have not heard of &lt;code&gt;$*&lt;/code&gt;, read &lt;a href="http://bash-hackers.org/wiki/doku.php/scripting/posparams#mass_usage"&gt;this&lt;/a&gt;. The way I reference the positional parameters is like &lt;code&gt;${@}&lt;/code&gt;. That’s because the brackets allow me to add a &lt;em&gt;default value&lt;/em&gt; to the variable. A &lt;em&gt;default value&lt;/em&gt; is the value that the variable will seem to have if the variable is not set. The way to use a &lt;em&gt;default value&lt;/em&gt; is with the &lt;code&gt;:-&lt;/code&gt;, like so: &lt;code&gt;${@:-"hello"}&lt;/code&gt;. So if &lt;code&gt;$@&lt;/code&gt; is not set, it will seem to have the value &lt;code&gt;"hello"&lt;/code&gt;. You will then notice that is all enclosed in &lt;code&gt;()&lt;/code&gt;. That makes an array out of the &lt;em&gt;positional parameters&lt;/em&gt; (the first argument to the program becomes the first element in the array, the second argument becomes the second element, etc.).&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="bash"&gt;&lt;span class="k"&gt;for &lt;/span&gt;i in &lt;span class="s2"&gt;&amp;quot;${INPUTS[@]}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Line 3 begins a &lt;code&gt;for&lt;/code&gt; loop which will assign to &lt;code&gt;i&lt;/code&gt; each value stored in the array &lt;code&gt;INPUTS&lt;/code&gt; which was discussed earlier. The &lt;code&gt;@&lt;/code&gt; index used is the same for arrays as &lt;code&gt;$@&lt;/code&gt; is for the &lt;em&gt;positional parameters&lt;/em&gt;.&lt;/p&gt;&lt;p&gt;Maybe I’ll explain more when I’m less lazy.&lt;/p&gt;</content> </entry> <entry><title>Negative Indexed Arrays</title><link href="http://rus.har.mn/blog/2008-08-14/negative-indexed-arrays"/> <updated>2008-08-14T00:00:00-04:00</updated> <id>tag:rus.har.mn,2008-08-14:/blog/2008-08-14/negative-indexed-arrays</id> <category scheme="http://rus.har.mn/tag" term="machinae"/> <content type="html">&lt;p&gt;In first describing how ridiculous C and C++ was to my class when I was in my first C++ programming course, I remember him saying that you can even create negative indexed arrays. Now that I am a bit wiser in the ways of C++ and memory management, I actually know how to do it!&lt;/p&gt;&lt;p&gt;The following small C++ program illustrates:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="cpp"&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When executed, it gives us this:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="console"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; g++ -Wall NegArray.cpp -o NegArray &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./NegArray &lt;span class="go"&gt;Hello&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason this happens is that since arrays in C and C++ are linear in memory, you can do math on them (the &lt;code&gt;++array&lt;/code&gt; and &lt;code&gt;--array&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;So if the array looks like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt; 0xFADC 0xFADD &amp;lt;-- This is the address ----------------- | Hello | World | ----------------- &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you printed your array (without an index), you would see &lt;code&gt;0xFADC&lt;/code&gt;; the address of the first element. Therefore if you add one to that, your array’s element &lt;code&gt;0&lt;/code&gt; would point at memory address &lt;code&gt;0xFADD&lt;/code&gt;, and it’s element &lt;code&gt;-1&lt;/code&gt; would point at memory address &lt;code&gt;0xFADC&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Remember&lt;/em&gt;, don’t try to &lt;code&gt;delete&lt;/code&gt; an array like this before restoring it to the way it originally was or you will get a segfault.&lt;/p&gt;&lt;p&gt;A shorter way of doing it that doesn’t involve using &lt;code&gt;new&lt;/code&gt; is:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="cpp"&gt;&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;World!&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A probably more readable way to do it in C is as follows:&lt;/p&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="c"&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;World!&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content> </entry> </feed>